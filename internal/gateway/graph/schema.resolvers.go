package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"connectrpc.com/connect"
	"github.com/iho/bookstore/internal/gateway/graph/model"
	"github.com/iho/bookstore/internal/gateway/loaders"
	authorsV1 "github.com/iho/bookstore/protos/gen/authors/v1"
	booksV1 "github.com/iho/bookstore/protos/gen/books/v1"
)

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.CreateBookInput) (*model.Book, error) {
	req := connect.NewRequest(&booksV1.CreateBookRequest{
		Title:         input.Title,
		AuthorId:      input.AuthorID,
		PublishedDate: input.PublishedDate,
	})

	res, err := r.booksv1connect.CreateBook(context.Background(), req)
	if err != nil {
		return nil, fmt.Errorf("failed to create book: %w", err)
	}

	authorReq := connect.NewRequest(&authorsV1.GetAuthorRequest{
		Id: res.Msg.Book.AuthorId,
	})

	authorRes, err := r.authorsv1connect.GetAuthor(context.Background(), authorReq)
	if err != nil {
		return nil, fmt.Errorf("failed to get author: %w", err)
	}

	return &model.Book{
		ID:    res.Msg.Book.Id,
		Title: res.Msg.Book.Title,
		Author: &model.Author{
			ID:   authorRes.Msg.Author.Id,
			Name: authorRes.Msg.Author.Name,
		},
		PublishedDate: res.Msg.Book.PublishedDate,
	}, nil
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, input model.UpdateBookInput) (*model.Book, error) {

	req := connect.NewRequest(&booksV1.UpdateBookRequest{
		Id:            input.ID,
		Title:         input.Title,
		AuthorId:      input.AuthorID,
		PublishedDate: input.PublishedDate,
	})

	res, err := r.booksv1connect.UpdateBook(context.Background(), req)
	if err != nil {
		return nil, fmt.Errorf("failed to update book: %w", err)
	}

	authorReq := connect.NewRequest(&authorsV1.GetAuthorRequest{
		Id: res.Msg.Book.AuthorId,
	})

	authorRes, err := r.authorsv1connect.GetAuthor(context.Background(), authorReq)
	if err != nil {
		return nil, fmt.Errorf("failed to get author: %w", err)
	}

	return &model.Book{
		ID:    res.Msg.Book.Id,
		Title: res.Msg.Book.Title,
		Author: &model.Author{
			ID:   authorRes.Msg.Author.Id,
			Name: authorRes.Msg.Author.Name,
		},
		PublishedDate: res.Msg.Book.PublishedDate,
	}, nil
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, input model.DeleteBookInput) (bool, error) {
	req := connect.NewRequest(&booksV1.DeleteBookRequest{
		Id: input.ID,
	})

	res, err := r.booksv1connect.DeleteBook(context.Background(), req)
	if err != nil {
		return false, fmt.Errorf("failed to delete book: %w", err)
	}

	return res.Msg.Status, nil
}

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.CreateAuthorInput) (*model.Author, error) {
	req := connect.NewRequest(&authorsV1.CreateAuthorRequest{
		Name: input.Name,
	})

	res, err := r.authorsv1connect.CreateAuthor(context.Background(), req)
	if err != nil {
		return nil, fmt.Errorf("failed to create author: %w", err)
	}

	return &model.Author{
		ID:   res.Msg.Author.Id,
		Name: res.Msg.Author.Name,
	}, nil
}

// UpdateAuthor is the resolver for the updateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, input model.UpdateAuthorInput) (*model.Author, error) {

	req := connect.NewRequest(&authorsV1.UpdateAuthorRequest{
		Id:   input.ID,
		Name: input.Name,
	})

	res, err := r.authorsv1connect.UpdateAuthor(context.Background(), req)
	if err != nil {
		return nil, fmt.Errorf("failed to update author: %w", err)
	}

	return &model.Author{
		ID:   res.Msg.Author.Id,
		Name: res.Msg.Author.Name,
	}, nil

}

// DeleteAuthor is the resolver for the deleteAuthor field.
func (r *mutationResolver) DeleteAuthor(ctx context.Context, input model.DeleteAuthorInput) (bool, error) {

	req := connect.NewRequest(&authorsV1.DeleteAuthorRequest{
		Id: input.ID,
	})

	res, err := r.authorsv1connect.DeleteAuthor(context.Background(), req)
	if err != nil {
		return false, fmt.Errorf("failed to delete author: %w", err)
	}

	return res.Msg.Status, nil
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.CreateOrderInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// UpdateOrder is the resolver for the updateOrder field.
func (r *mutationResolver) UpdateOrder(ctx context.Context, input model.UpdateOrderInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: UpdateOrder - updateOrder"))
}

// DeleteOrder is the resolver for the deleteOrder field.
func (r *mutationResolver) DeleteOrder(ctx context.Context, input model.DeleteOrderInput) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteOrder - deleteOrder"))
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context, input *model.BooksQueryInput) ([]*model.Book, error) {
	loaders := loaders.For(ctx)
	return loaders.BookLoader.LoadAll(ctx, input.IDs)
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, input *model.BookQueryInput) (*model.Book, error) {
	loaders := loaders.For(ctx)
	return loaders.BookLoader.Load(ctx, input.ID)
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context, input *model.AuthorsQueryInput) ([]*model.Author, error) {
	loaders := loaders.For(ctx)
	return loaders.AuthourLoader.LoadAll(ctx, input.IDs)
}

// Author is the resolver for the author field.
func (r *queryResolver) Author(ctx context.Context, input *model.AuthorQueryInput) (*model.Author, error) {
	loaders := loaders.For(ctx)
	return loaders.AuthourLoader.Load(ctx, input.ID)
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, input *model.OrdersQueryInput) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, input *model.OrderQueryInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
