// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: books/v1/books.proto

package booksv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/iho/bookstore/protos/gen/books/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BooksServiceName is the fully-qualified name of the BooksService service.
	BooksServiceName = "books.v1.BooksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BooksServiceListBooksProcedure is the fully-qualified name of the BooksService's ListBooks RPC.
	BooksServiceListBooksProcedure = "/books.v1.BooksService/ListBooks"
	// BooksServiceGetBookProcedure is the fully-qualified name of the BooksService's GetBook RPC.
	BooksServiceGetBookProcedure = "/books.v1.BooksService/GetBook"
	// BooksServiceCreateBookProcedure is the fully-qualified name of the BooksService's CreateBook RPC.
	BooksServiceCreateBookProcedure = "/books.v1.BooksService/CreateBook"
	// BooksServiceUpdateBookProcedure is the fully-qualified name of the BooksService's UpdateBook RPC.
	BooksServiceUpdateBookProcedure = "/books.v1.BooksService/UpdateBook"
	// BooksServiceDeleteBookProcedure is the fully-qualified name of the BooksService's DeleteBook RPC.
	BooksServiceDeleteBookProcedure = "/books.v1.BooksService/DeleteBook"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	booksServiceServiceDescriptor          = v1.File_books_v1_books_proto.Services().ByName("BooksService")
	booksServiceListBooksMethodDescriptor  = booksServiceServiceDescriptor.Methods().ByName("ListBooks")
	booksServiceGetBookMethodDescriptor    = booksServiceServiceDescriptor.Methods().ByName("GetBook")
	booksServiceCreateBookMethodDescriptor = booksServiceServiceDescriptor.Methods().ByName("CreateBook")
	booksServiceUpdateBookMethodDescriptor = booksServiceServiceDescriptor.Methods().ByName("UpdateBook")
	booksServiceDeleteBookMethodDescriptor = booksServiceServiceDescriptor.Methods().ByName("DeleteBook")
)

// BooksServiceClient is a client for the books.v1.BooksService service.
type BooksServiceClient interface {
	ListBooks(context.Context, *connect.Request[v1.ListBooksRequest]) (*connect.Response[v1.ListBooksResponse], error)
	GetBook(context.Context, *connect.Request[v1.GetBookRequest]) (*connect.Response[v1.GetBookResponse], error)
	CreateBook(context.Context, *connect.Request[v1.CreateBookRequest]) (*connect.Response[v1.CreateBookResponse], error)
	UpdateBook(context.Context, *connect.Request[v1.UpdateBookRequest]) (*connect.Response[v1.UpdateBookResponse], error)
	DeleteBook(context.Context, *connect.Request[v1.DeleteBookRequest]) (*connect.Response[v1.DeleteBookResponse], error)
}

// NewBooksServiceClient constructs a client for the books.v1.BooksService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBooksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BooksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &booksServiceClient{
		listBooks: connect.NewClient[v1.ListBooksRequest, v1.ListBooksResponse](
			httpClient,
			baseURL+BooksServiceListBooksProcedure,
			connect.WithSchema(booksServiceListBooksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getBook: connect.NewClient[v1.GetBookRequest, v1.GetBookResponse](
			httpClient,
			baseURL+BooksServiceGetBookProcedure,
			connect.WithSchema(booksServiceGetBookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createBook: connect.NewClient[v1.CreateBookRequest, v1.CreateBookResponse](
			httpClient,
			baseURL+BooksServiceCreateBookProcedure,
			connect.WithSchema(booksServiceCreateBookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateBook: connect.NewClient[v1.UpdateBookRequest, v1.UpdateBookResponse](
			httpClient,
			baseURL+BooksServiceUpdateBookProcedure,
			connect.WithSchema(booksServiceUpdateBookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteBook: connect.NewClient[v1.DeleteBookRequest, v1.DeleteBookResponse](
			httpClient,
			baseURL+BooksServiceDeleteBookProcedure,
			connect.WithSchema(booksServiceDeleteBookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// booksServiceClient implements BooksServiceClient.
type booksServiceClient struct {
	listBooks  *connect.Client[v1.ListBooksRequest, v1.ListBooksResponse]
	getBook    *connect.Client[v1.GetBookRequest, v1.GetBookResponse]
	createBook *connect.Client[v1.CreateBookRequest, v1.CreateBookResponse]
	updateBook *connect.Client[v1.UpdateBookRequest, v1.UpdateBookResponse]
	deleteBook *connect.Client[v1.DeleteBookRequest, v1.DeleteBookResponse]
}

// ListBooks calls books.v1.BooksService.ListBooks.
func (c *booksServiceClient) ListBooks(ctx context.Context, req *connect.Request[v1.ListBooksRequest]) (*connect.Response[v1.ListBooksResponse], error) {
	return c.listBooks.CallUnary(ctx, req)
}

// GetBook calls books.v1.BooksService.GetBook.
func (c *booksServiceClient) GetBook(ctx context.Context, req *connect.Request[v1.GetBookRequest]) (*connect.Response[v1.GetBookResponse], error) {
	return c.getBook.CallUnary(ctx, req)
}

// CreateBook calls books.v1.BooksService.CreateBook.
func (c *booksServiceClient) CreateBook(ctx context.Context, req *connect.Request[v1.CreateBookRequest]) (*connect.Response[v1.CreateBookResponse], error) {
	return c.createBook.CallUnary(ctx, req)
}

// UpdateBook calls books.v1.BooksService.UpdateBook.
func (c *booksServiceClient) UpdateBook(ctx context.Context, req *connect.Request[v1.UpdateBookRequest]) (*connect.Response[v1.UpdateBookResponse], error) {
	return c.updateBook.CallUnary(ctx, req)
}

// DeleteBook calls books.v1.BooksService.DeleteBook.
func (c *booksServiceClient) DeleteBook(ctx context.Context, req *connect.Request[v1.DeleteBookRequest]) (*connect.Response[v1.DeleteBookResponse], error) {
	return c.deleteBook.CallUnary(ctx, req)
}

// BooksServiceHandler is an implementation of the books.v1.BooksService service.
type BooksServiceHandler interface {
	ListBooks(context.Context, *connect.Request[v1.ListBooksRequest]) (*connect.Response[v1.ListBooksResponse], error)
	GetBook(context.Context, *connect.Request[v1.GetBookRequest]) (*connect.Response[v1.GetBookResponse], error)
	CreateBook(context.Context, *connect.Request[v1.CreateBookRequest]) (*connect.Response[v1.CreateBookResponse], error)
	UpdateBook(context.Context, *connect.Request[v1.UpdateBookRequest]) (*connect.Response[v1.UpdateBookResponse], error)
	DeleteBook(context.Context, *connect.Request[v1.DeleteBookRequest]) (*connect.Response[v1.DeleteBookResponse], error)
}

// NewBooksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBooksServiceHandler(svc BooksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	booksServiceListBooksHandler := connect.NewUnaryHandler(
		BooksServiceListBooksProcedure,
		svc.ListBooks,
		connect.WithSchema(booksServiceListBooksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	booksServiceGetBookHandler := connect.NewUnaryHandler(
		BooksServiceGetBookProcedure,
		svc.GetBook,
		connect.WithSchema(booksServiceGetBookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	booksServiceCreateBookHandler := connect.NewUnaryHandler(
		BooksServiceCreateBookProcedure,
		svc.CreateBook,
		connect.WithSchema(booksServiceCreateBookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	booksServiceUpdateBookHandler := connect.NewUnaryHandler(
		BooksServiceUpdateBookProcedure,
		svc.UpdateBook,
		connect.WithSchema(booksServiceUpdateBookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	booksServiceDeleteBookHandler := connect.NewUnaryHandler(
		BooksServiceDeleteBookProcedure,
		svc.DeleteBook,
		connect.WithSchema(booksServiceDeleteBookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/books.v1.BooksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BooksServiceListBooksProcedure:
			booksServiceListBooksHandler.ServeHTTP(w, r)
		case BooksServiceGetBookProcedure:
			booksServiceGetBookHandler.ServeHTTP(w, r)
		case BooksServiceCreateBookProcedure:
			booksServiceCreateBookHandler.ServeHTTP(w, r)
		case BooksServiceUpdateBookProcedure:
			booksServiceUpdateBookHandler.ServeHTTP(w, r)
		case BooksServiceDeleteBookProcedure:
			booksServiceDeleteBookHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBooksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBooksServiceHandler struct{}

func (UnimplementedBooksServiceHandler) ListBooks(context.Context, *connect.Request[v1.ListBooksRequest]) (*connect.Response[v1.ListBooksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("books.v1.BooksService.ListBooks is not implemented"))
}

func (UnimplementedBooksServiceHandler) GetBook(context.Context, *connect.Request[v1.GetBookRequest]) (*connect.Response[v1.GetBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("books.v1.BooksService.GetBook is not implemented"))
}

func (UnimplementedBooksServiceHandler) CreateBook(context.Context, *connect.Request[v1.CreateBookRequest]) (*connect.Response[v1.CreateBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("books.v1.BooksService.CreateBook is not implemented"))
}

func (UnimplementedBooksServiceHandler) UpdateBook(context.Context, *connect.Request[v1.UpdateBookRequest]) (*connect.Response[v1.UpdateBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("books.v1.BooksService.UpdateBook is not implemented"))
}

func (UnimplementedBooksServiceHandler) DeleteBook(context.Context, *connect.Request[v1.DeleteBookRequest]) (*connect.Response[v1.DeleteBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("books.v1.BooksService.DeleteBook is not implemented"))
}
