// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: orders/v1/orders.proto

package ordersv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/iho/bookstore/protos/gen/orders/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrdersServiceName is the fully-qualified name of the OrdersService service.
	OrdersServiceName = "orders.v1.OrdersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrdersServiceListOrdersProcedure is the fully-qualified name of the OrdersService's ListOrders
	// RPC.
	OrdersServiceListOrdersProcedure = "/orders.v1.OrdersService/ListOrders"
	// OrdersServiceGetOrderProcedure is the fully-qualified name of the OrdersService's GetOrder RPC.
	OrdersServiceGetOrderProcedure = "/orders.v1.OrdersService/GetOrder"
	// OrdersServiceCreateOrderProcedure is the fully-qualified name of the OrdersService's CreateOrder
	// RPC.
	OrdersServiceCreateOrderProcedure = "/orders.v1.OrdersService/CreateOrder"
	// OrdersServiceUpdateOrderProcedure is the fully-qualified name of the OrdersService's UpdateOrder
	// RPC.
	OrdersServiceUpdateOrderProcedure = "/orders.v1.OrdersService/UpdateOrder"
	// OrdersServiceDeleteOrderProcedure is the fully-qualified name of the OrdersService's DeleteOrder
	// RPC.
	OrdersServiceDeleteOrderProcedure = "/orders.v1.OrdersService/DeleteOrder"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	ordersServiceServiceDescriptor           = v1.File_orders_v1_orders_proto.Services().ByName("OrdersService")
	ordersServiceListOrdersMethodDescriptor  = ordersServiceServiceDescriptor.Methods().ByName("ListOrders")
	ordersServiceGetOrderMethodDescriptor    = ordersServiceServiceDescriptor.Methods().ByName("GetOrder")
	ordersServiceCreateOrderMethodDescriptor = ordersServiceServiceDescriptor.Methods().ByName("CreateOrder")
	ordersServiceUpdateOrderMethodDescriptor = ordersServiceServiceDescriptor.Methods().ByName("UpdateOrder")
	ordersServiceDeleteOrderMethodDescriptor = ordersServiceServiceDescriptor.Methods().ByName("DeleteOrder")
)

// OrdersServiceClient is a client for the orders.v1.OrdersService service.
type OrdersServiceClient interface {
	ListOrders(context.Context, *connect.Request[v1.ListOrdersRequest]) (*connect.Response[v1.ListOrdersResponse], error)
	GetOrder(context.Context, *connect.Request[v1.GetOrderRequest]) (*connect.Response[v1.GetOrderResponse], error)
	CreateOrder(context.Context, *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderResponse], error)
	UpdateOrder(context.Context, *connect.Request[v1.UpdateOrderRequest]) (*connect.Response[v1.UpdateOrderResponse], error)
	DeleteOrder(context.Context, *connect.Request[v1.DeleteOrderRequest]) (*connect.Response[v1.DeleteOrderResponse], error)
}

// NewOrdersServiceClient constructs a client for the orders.v1.OrdersService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrdersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrdersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ordersServiceClient{
		listOrders: connect.NewClient[v1.ListOrdersRequest, v1.ListOrdersResponse](
			httpClient,
			baseURL+OrdersServiceListOrdersProcedure,
			connect.WithSchema(ordersServiceListOrdersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrder: connect.NewClient[v1.GetOrderRequest, v1.GetOrderResponse](
			httpClient,
			baseURL+OrdersServiceGetOrderProcedure,
			connect.WithSchema(ordersServiceGetOrderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOrder: connect.NewClient[v1.CreateOrderRequest, v1.CreateOrderResponse](
			httpClient,
			baseURL+OrdersServiceCreateOrderProcedure,
			connect.WithSchema(ordersServiceCreateOrderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOrder: connect.NewClient[v1.UpdateOrderRequest, v1.UpdateOrderResponse](
			httpClient,
			baseURL+OrdersServiceUpdateOrderProcedure,
			connect.WithSchema(ordersServiceUpdateOrderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOrder: connect.NewClient[v1.DeleteOrderRequest, v1.DeleteOrderResponse](
			httpClient,
			baseURL+OrdersServiceDeleteOrderProcedure,
			connect.WithSchema(ordersServiceDeleteOrderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// ordersServiceClient implements OrdersServiceClient.
type ordersServiceClient struct {
	listOrders  *connect.Client[v1.ListOrdersRequest, v1.ListOrdersResponse]
	getOrder    *connect.Client[v1.GetOrderRequest, v1.GetOrderResponse]
	createOrder *connect.Client[v1.CreateOrderRequest, v1.CreateOrderResponse]
	updateOrder *connect.Client[v1.UpdateOrderRequest, v1.UpdateOrderResponse]
	deleteOrder *connect.Client[v1.DeleteOrderRequest, v1.DeleteOrderResponse]
}

// ListOrders calls orders.v1.OrdersService.ListOrders.
func (c *ordersServiceClient) ListOrders(ctx context.Context, req *connect.Request[v1.ListOrdersRequest]) (*connect.Response[v1.ListOrdersResponse], error) {
	return c.listOrders.CallUnary(ctx, req)
}

// GetOrder calls orders.v1.OrdersService.GetOrder.
func (c *ordersServiceClient) GetOrder(ctx context.Context, req *connect.Request[v1.GetOrderRequest]) (*connect.Response[v1.GetOrderResponse], error) {
	return c.getOrder.CallUnary(ctx, req)
}

// CreateOrder calls orders.v1.OrdersService.CreateOrder.
func (c *ordersServiceClient) CreateOrder(ctx context.Context, req *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderResponse], error) {
	return c.createOrder.CallUnary(ctx, req)
}

// UpdateOrder calls orders.v1.OrdersService.UpdateOrder.
func (c *ordersServiceClient) UpdateOrder(ctx context.Context, req *connect.Request[v1.UpdateOrderRequest]) (*connect.Response[v1.UpdateOrderResponse], error) {
	return c.updateOrder.CallUnary(ctx, req)
}

// DeleteOrder calls orders.v1.OrdersService.DeleteOrder.
func (c *ordersServiceClient) DeleteOrder(ctx context.Context, req *connect.Request[v1.DeleteOrderRequest]) (*connect.Response[v1.DeleteOrderResponse], error) {
	return c.deleteOrder.CallUnary(ctx, req)
}

// OrdersServiceHandler is an implementation of the orders.v1.OrdersService service.
type OrdersServiceHandler interface {
	ListOrders(context.Context, *connect.Request[v1.ListOrdersRequest]) (*connect.Response[v1.ListOrdersResponse], error)
	GetOrder(context.Context, *connect.Request[v1.GetOrderRequest]) (*connect.Response[v1.GetOrderResponse], error)
	CreateOrder(context.Context, *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderResponse], error)
	UpdateOrder(context.Context, *connect.Request[v1.UpdateOrderRequest]) (*connect.Response[v1.UpdateOrderResponse], error)
	DeleteOrder(context.Context, *connect.Request[v1.DeleteOrderRequest]) (*connect.Response[v1.DeleteOrderResponse], error)
}

// NewOrdersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrdersServiceHandler(svc OrdersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ordersServiceListOrdersHandler := connect.NewUnaryHandler(
		OrdersServiceListOrdersProcedure,
		svc.ListOrders,
		connect.WithSchema(ordersServiceListOrdersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceGetOrderHandler := connect.NewUnaryHandler(
		OrdersServiceGetOrderProcedure,
		svc.GetOrder,
		connect.WithSchema(ordersServiceGetOrderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceCreateOrderHandler := connect.NewUnaryHandler(
		OrdersServiceCreateOrderProcedure,
		svc.CreateOrder,
		connect.WithSchema(ordersServiceCreateOrderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceUpdateOrderHandler := connect.NewUnaryHandler(
		OrdersServiceUpdateOrderProcedure,
		svc.UpdateOrder,
		connect.WithSchema(ordersServiceUpdateOrderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceDeleteOrderHandler := connect.NewUnaryHandler(
		OrdersServiceDeleteOrderProcedure,
		svc.DeleteOrder,
		connect.WithSchema(ordersServiceDeleteOrderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/orders.v1.OrdersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrdersServiceListOrdersProcedure:
			ordersServiceListOrdersHandler.ServeHTTP(w, r)
		case OrdersServiceGetOrderProcedure:
			ordersServiceGetOrderHandler.ServeHTTP(w, r)
		case OrdersServiceCreateOrderProcedure:
			ordersServiceCreateOrderHandler.ServeHTTP(w, r)
		case OrdersServiceUpdateOrderProcedure:
			ordersServiceUpdateOrderHandler.ServeHTTP(w, r)
		case OrdersServiceDeleteOrderProcedure:
			ordersServiceDeleteOrderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrdersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrdersServiceHandler struct{}

func (UnimplementedOrdersServiceHandler) ListOrders(context.Context, *connect.Request[v1.ListOrdersRequest]) (*connect.Response[v1.ListOrdersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.ListOrders is not implemented"))
}

func (UnimplementedOrdersServiceHandler) GetOrder(context.Context, *connect.Request[v1.GetOrderRequest]) (*connect.Response[v1.GetOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.GetOrder is not implemented"))
}

func (UnimplementedOrdersServiceHandler) CreateOrder(context.Context, *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.CreateOrder is not implemented"))
}

func (UnimplementedOrdersServiceHandler) UpdateOrder(context.Context, *connect.Request[v1.UpdateOrderRequest]) (*connect.Response[v1.UpdateOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.UpdateOrder is not implemented"))
}

func (UnimplementedOrdersServiceHandler) DeleteOrder(context.Context, *connect.Request[v1.DeleteOrderRequest]) (*connect.Response[v1.DeleteOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.DeleteOrder is not implemented"))
}
